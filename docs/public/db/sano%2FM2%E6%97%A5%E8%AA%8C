{"path":"sano/M2日誌","name":"sano/M2日誌","markdown":"# 2022/04/23 { #4344ae6c-a148-44a6-8cee-a155ebae9cda }\n\n\nメモ：\nrust で何作ろうか考えていた．wiki を作ってみるのは良いかもしれない．\n\n----\n\n今日のクソコード\n\npython/selenium で，\n\n```python\n elem.implicityly_wait = 5\n```\n\nとか言う意味不明なことをやっていた．\n- そもそも，`elem.implicitly_wait(5)` のように関数適用するはずで，なぜ代入しだすのか意味不明．\n- しかもスペルミスしてる implicitYly_wait となっていた．代入を関数適用に直しただけだと実行時エラーになってクソ．\n\n誰だこれ書いたの（憤怒．とか言って，もしかしてぼくか？？？）\n\n\n\n----\n\n[Is Parallel Programming Hard, And, If So, What Can You Do About It?](https://arxiv.org/pdf/1701.00854.pdf) を冒頭 110 ページくらいをザーッと流し読みした．\n- （かなり初歩的な部分から）相当わかりやすく書かれている印象を受けた．確かに並列をやるなら眺めておくべきと言う感じではある．\n- appendix を除くと，全部で 400 ページ（そんなに多くない）．ミニクイズの答えもちゃんとついてきているし，暇つぶし感覚でもう少し読んでみようかなと思っております．\n- <http://liburcu.org/>\n\n\n\n# 2022/04/22 { #e5297221-a689-4de6-bc5b-5a9e32330e3f }\n\nto yamamoto:\n[Dactl](https://www.researchgate.net/publication/220398770_Dactl_an_experimental_graph_rewriting_language) には，モジュールやアクセス修飾子もある．\n- 「単なるモジュール化（？）」にあまり興味は持てない．\n- けど，データフロー言語が現状どうなっているかとか，外界は常に気になる．\n- session types とか．GraphQL とか．\n\n\n\n# 2022/04/20 { #991fde44-0016-4529-967e-e1e4b0fd989f }\n\n[graph grammar inclusion problem で検索して出てきた謎の pdf](https://moves.rwth-aachen.de/wp-content/uploads/proposal-inclusion-problem.pdf)\n- 一体どういうものなのかよくわからない（まだ解決されていないと思って良いよね？）\n\n# 2022/04/19 { #1dd88a53-78b9-4136-9000-efb189010275 }\n\n差分リストの連結の証明を（例として）スライドにする．\n\n\nタイトルを決めて論文を書き始めた方が良い．\n- 書けるところを決めて書き始める\n\n\nPOPL とか isopp とかを適当に眺めておく．\n\n\n----\n\nrust に関するメモ：\n\nrust documentation\n- <https://doc.rust-lang.org/book/>\n\n\nwriting an os in rust\n- <https://os.phil-opp.com/>\n- x86 なので，研究室に転がってるクソ雑魚マシンを適当に使う予定．\n\n\nrust compiler documentation\n- <https://rustc-dev-guide.rust-lang.org/>\n- コンパイラの構成などについてもかなり詳しくドキュメント化されている．\n- この辺に課題とかが書いてあるので，解決できると．．．？？？\n-- <https://rustc-dev-guide.rust-lang.org/overview.html>\n\n\nrust でバックエンド実装のサンプル\n- [RustでWebApplicationを実装する](https://ozway.jp/2020/10/rust%E3%81%A7webapplication%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E3%80%80-%E3%81%9D%E3%81%AE1/)\n- actix-web で api サーバを立てて，diesel でデータベースと接続（ORM）してる．\n- バイト先ではこいつをベースを実装してる（ふりをしてる．あんまり進んでないが．．．）．\n\n\nfront のためのフレームワークもある\n- <https://github.com/yewstack/yew>\n- view 以外は WASM にトランスパイルするっぽい．\n\n\nrust to WASM\n- <https://rustwasm.github.io/book/>\n\n\n----\n\njekyll の theme を適当にいじって自分のサイトのデザイン（色とフォントだけだが）を変えてみた．\n- https://www.ueda.info.waseda.ac.jp/~sano/\n- [[gitlab repository>https://gitlab.ueda.info.waseda.ac.jp/sano/mypage]]\n- sass デビューです．\n\n\n\n\n\n# 2022/04/17 { #a02c50ab-0e26-480e-ab65-a0be626a7619 }\n\n\n\n&ref(./invalid-pre-proof.png,20%);\n\n[an introduction to cyclic proof](http://www0.cs.ucl.ac.uk/staff/J.Brotherston/slides/imperial_04_08.pdf)\n\n\n# 2022/04/16 { #30deb842-d519-4c94-be79-dce4dd8e1d0c }\n\n\n差分スキップリストと control flow graph の違いの話に関して追記（山本さんの日誌に対応して）：\n- ただ切断するだけじゃなくて，切断したあとに根からのパスが正規言語になっている必要がある．ということ．\n\n// 「◁」に関しては，普通に「：」を使えば良い気がしてきた．\n\n\n----\n\n[ghc (haskell) の wiki](https://gitlab.haskell.org/ghc/ghc/-/wikis/index)\n\nhaskell の拡張まわりの面白い話が色々転がっていそう．\n\n----\n\n[[egison documentation>https://www.egison.org/tutorial.pdf]]\n\negison は edge を整数の id で持たせる隣接リストを書いて，それに対してパターンマッチができる．\n- つまり，グラフとそのパターンマッチが扱える．\n-- 多重集合書き換え系としての lmntal の機能は大体再現できそう．\n- ポインタを使ったデータ構造としての（lmntal の）グラフが直接扱えるわけではない．\n\n\n\n\n# 2022/04/15  { #cbb2e0b1-ad72-4b1d-98cb-30ee8b3ac503 }\n\n\n\nD ゼミ：\n\n今考えていることについて話した．\n\nグラフの合成，分解の定義は？\n- 用語があまりよろしくない．特に分解に関して．\n- 合成は終端記号や非終端記号を適当にくっつけたグラフの型検査\n- 分解はパターンマッチの際の話：\n-- パターンマッチの網羅性，全てのパターンがマッチしうるものになっているかの検証，パターンマッチが決定的に行われるかの検証\n- のつもり．\n\n差分スキップリストはなぜ Regular に入るのか？（control flow graph は入らないのに）\n- うまいこと切断してやっている．\n- control flow graph は差分スキップリストとは違い，（少なくとも，素朴には）「うまい切断」ができない．\n\n「◁」の定義は外延的だけど，もう少し扱いやすい形にできるのではないか？（完全性を捨てても良い？）\n- いまいち意図が理解できていないかも知れない．定義だし，個人的には綺麗で自然な定義という感じがする．\n- todo: 外延的な定義を加えたのは，「開始記号まで辿れる」というだけだと差分リストの末尾問題が解消できないから．という説明を加える．\n\nマーカの話（leaf linked tree で leaf だけを伝わるということ）は別に検証できなかったとしても，\nユーザに余計なパターンを書かせれば良いだけ（安全ではある）なので，\n重要度はそこまで高くないのでは？\n- それはそう．\n\nマーカーとかいう新しい概念を入れるよりも，型定義を複雑にしてでもそれでやった方が綺麗になるのでは？\n- わからない（そうではないと思ってはいる）．\n- 実際に型定義を書いて検証してみた方が良いだろう．とのこと．\n\nこれは関数型のための手法なのか？というか関数はないのか？\n- データ構造の検証で，将来的な落とし所は Rust の拡張である．\n- 関数型に限らず応用できる．\n\n\nプログラムを，グラフ部分を図として表すと見やすいことがわかった．\n\n\n\n\n\n----\n\n\n[論文の読み方](https://speakerdeck.com/kaityo256/how-to-survey?slide=15)\n\n\n# 2022/04/14 { #ceea14d0-859b-4e61-bebd-ed2e2499ec9b }\n\n班ゼミ：\n- PPL2022 の報告\n\n\n\ncyclic proof を用いたメタ定理：\n\n\n# 2022/04/12  { #b547973a-3805-4bb4-b320-237bcfa7c18b }\n\ngit(hub) 紹介をしました．\n- 去年までは，なんかこういうのあれば良いな．と思っていて，やってみたけど，実際にやるとなんかどうなんだろう（果たして必要だったのか）という気分になった．\n\n\ntodo:\n- uzawa くん（または M0）に zoom 接続係をたのむ．\n\n\n\n\n\n\n# 2022/04/08  { #8ca7a119-ea3d-481d-b50b-756655a2c562 }\n\nメモ：\n\n高信頼化ソフトウェアのための開発手法ガイドブック\n- https://www.ipa.go.jp/files/000005144.pdf\n- 現場用のテストの話．モデル検査とかはない（たぶん）\n\n\n# 2022/04/07 { #321c74c7-33f9-4bdb-a05c-c47578ae9f1c }\n\nそろそろ研究がしたい．\n\n\n今何ができているか：\n- グラフの合成に関して型検査の手法を考えた．\n  - 手法に関してはそれなりに自信がある．と思っている．\n  - 一応実装も進めていたけど，問題が発覚したので，ゼロから作り直した方が良いかも（が時間も労力もかかる）\n  - この正当性に関して（特に cyclic proof 周り）は，特にきちんと議論したい（ので明日の余った時間と日曜日に資料を作る予定）．\n- グラフの分解に関しては，実はまだ手法は確立していない．\n  - 頭の中に何となくはある．\n- マーカーの導入．その型検査．\n  - これも手法が確立していない．頭の中に何となくといった感じ．\n\n\n何をすべきか？\n- 実装は一旦放置して分解やマーカーの検査の手法をきちんと確立する？\n\n\n相談すべきこと：\n+ 論文にするとしたらどういう形になるのか．正直よくわかっていないので，そこから要相談．というか先に自分で調べないといけない．\n+ グラフの合成の正当性の議論\n+ グラフの分解やマーカの検査（これはまだ持ち出さない方が良いかも？）\n\n\nその他論文にできるかも知れないと考えている話：\nflat hyperlmntal の semantics\n- 正直これ以上意味論を発展させるほぼ気はない（プロセスの等価性とか）\n  - 土台がふわふわしていて私にはよくわからなかった（現時点での私には理解できていないというだけで，価値がないだとか主張しているわけではない）．\n- 「自由リンクの集合が構造合同なプロセス間で変わらない」というのは，\n要するに，「全てのリンクがつながっている」ことを証明できてしまった素朴な flat lmntal の拡張とは違うということにつながっているはずなので，\nこのあたりの証明をもうちょっとだけちゃんとやれば，それっぽく見えるようになるのではないかと思っている（つまり，「全てのリンクがつながっている」わけではないということをきちんと証明してやる）．\n\n\nやらなきゃいけないこと：\n- 資料作成．現状の整理．\n- 投稿先を調べる？\n\n\n\n\n\n# 2022/04/04  { #5effe415-70a5-4021-8cd8-7dfa313432c5 }\n\nthis is a test\n","html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n    <!-- google font -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Fira+Sans:wght@300&family=JetBrains+Mono:wght@300&family=Noto+Sans+JP:wght@300&display=swap\"\n      rel=\"stylesheet\"\n    />\n\n    <!-- highlight.js -->\n    <link rel=\"stylesheet\" href=\"/files/assets/dracula.css\" />\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n\n    <!-- mathjax -->\n    <script src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>\n    <script\n      type=\"text/javascript\"\n      id=\"MathJax-script\"\n      async\n      src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\"\n    ></script>\n\n    <!-- custom css -->\n    <link rel=\"stylesheet\" href=\"/files/assets/main.css\" />\n\n    <title>sano/M2日誌</title>\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div class=\"wrapper\">\n        <div class=\"site-header\">\n          <div class=\"site-title\">sano/M2日誌</div>\n        </div>\n      </div>\n\n      <!-- header menu bar -->\n      <div class=\"wrapper header-menu\">\n        <a href=\"/\" class=\"button\">HOME</a>\n        <a href=\"/edit?path=sano/M2日誌\" class=\"button\">Update</a>\n        <form\n          action=\"/attach?path=sano/M2日誌\"\n          method=\"post\"\n          enctype=\"multipart/form-data\"\n          class=\"form-hided\"\n        >\n          <label class=\"button\">\n            Attach\n            <input\n              id=\"btn-select-attach\"\n              type=\"file\"\n              multiple\n              name=\"file\"\n              class=\"input-hided\"\n            />\n          </label>\n          <!--\n          <button type=\"submit\" class=\"button\">Submit</button>\n          -->\n        </form>\n        <form action=\"/edit\" method=\"DELETE\">\n          <input\n            type=\"submit\"\n            id=\"btn-submit-delete\"\n            name=\"btn-submit-delete\"\n            value=\"Delete\"\n            class=\"button\"\n          />\n        </form>\n      </div>\n\n      <!-- side menu bar -->\n      <div class=\"sidebar\">\n        <ul>\n          {{ INDEX_UL }}\n        </ul>\n      </div>\n\n      <!-- body contents -->\n      <div class=\"body-contents\">\n        <div class=\"updated-date\">Last modified: 2022-05-09 11:08:04</div>\n        <div class=\"body\"><div class=\"menu collapse\"><ul>\n<li><a href=\"#4344ae6c-a148-44a6-8cee-a155ebae9cda\">2022/04/23</a></li>\n<li><a href=\"#e5297221-a689-4de6-bc5b-5a9e32330e3f\">2022/04/22</a></li>\n<li><a href=\"#991fde44-0016-4529-967e-e1e4b0fd989f\">2022/04/20</a></li>\n<li><a href=\"#1dd88a53-78b9-4136-9000-efb189010275\">2022/04/19</a></li>\n<li><a href=\"#a02c50ab-0e26-480e-ab65-a0be626a7619\">2022/04/17</a></li>\n<li><a href=\"#30deb842-d519-4c94-be79-dce4dd8e1d0c\">2022/04/16</a></li>\n<li><a href=\"#cbb2e0b1-ad72-4b1d-98cb-30ee8b3ac503\">2022/04/15 </a></li>\n<li><a href=\"#ceea14d0-859b-4e61-bebd-ed2e2499ec9b\">2022/04/14</a></li>\n<li><a href=\"#b547973a-3805-4bb4-b320-237bcfa7c18b\">2022/04/12 </a></li>\n<li><a href=\"#8ca7a119-ea3d-481d-b50b-756655a2c562\">2022/04/08 </a></li>\n<li><a href=\"#321c74c7-33f9-4bdb-a05c-c47578ae9f1c\">2022/04/07</a></li>\n<li><a href=\"#5effe415-70a5-4021-8cd8-7dfa313432c5\">2022/04/04 </a></li>\n</ul>\n</div>\n<h1 id=\"4344ae6c-a148-44a6-8cee-a155ebae9cda\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#4344ae6c-a148-44a6-8cee-a155ebae9cda\" title=\"/pages?path=sano/M2日誌#4344ae6c-a148-44a6-8cee-a155ebae9cda\"></a>2022/04/23</h1>\n<p>メモ：\nrust で何作ろうか考えていた．wiki を作ってみるのは良いかもしれない．</p>\n<hr />\n<p>今日のクソコード</p>\n<p>python/selenium で，</p>\n<pre><code class=\"language-python\"> elem.implicityly_wait = 5\n</code></pre>\n<p>とか言う意味不明なことをやっていた．</p>\n<ul>\n<li>そもそも，<code>elem.implicitly_wait(5)</code> のように関数適用するはずで，なぜ代入しだすのか意味不明．</li>\n<li>しかもスペルミスしてる implicitYly_wait となっていた．代入を関数適用に直しただけだと実行時エラーになってクソ．</li>\n</ul>\n<p>誰だこれ書いたの（憤怒．とか言って，もしかしてぼくか？？？）</p>\n<hr />\n<p><a href=\"https://arxiv.org/pdf/1701.00854.pdf\">Is Parallel Programming Hard, And, If So, What Can You Do About It?</a> を冒頭 110 ページくらいをザーッと流し読みした．</p>\n<ul>\n<li>（かなり初歩的な部分から）相当わかりやすく書かれている印象を受けた．確かに並列をやるなら眺めておくべきと言う感じではある．</li>\n<li>appendix を除くと，全部で 400 ページ（そんなに多くない）．ミニクイズの答えもちゃんとついてきているし，暇つぶし感覚でもう少し読んでみようかなと思っております．</li>\n<li><a href=\"http://liburcu.org/\">http://liburcu.org/</a></li>\n</ul>\n<h1 id=\"e5297221-a689-4de6-bc5b-5a9e32330e3f\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#e5297221-a689-4de6-bc5b-5a9e32330e3f\" title=\"/pages?path=sano/M2日誌#e5297221-a689-4de6-bc5b-5a9e32330e3f\"></a>2022/04/22</h1>\n<p>to yamamoto:\n<a href=\"https://www.researchgate.net/publication/220398770_Dactl_an_experimental_graph_rewriting_language\">Dactl</a> には，モジュールやアクセス修飾子もある．</p>\n<ul>\n<li>「単なるモジュール化（？）」にあまり興味は持てない．</li>\n<li>けど，データフロー言語が現状どうなっているかとか，外界は常に気になる．</li>\n<li>session types とか．GraphQL とか．</li>\n</ul>\n<h1 id=\"991fde44-0016-4529-967e-e1e4b0fd989f\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#991fde44-0016-4529-967e-e1e4b0fd989f\" title=\"/pages?path=sano/M2日誌#991fde44-0016-4529-967e-e1e4b0fd989f\"></a>2022/04/20</h1>\n<p><a href=\"https://moves.rwth-aachen.de/wp-content/uploads/proposal-inclusion-problem.pdf\">graph grammar inclusion problem で検索して出てきた謎の pdf</a></p>\n<ul>\n<li>一体どういうものなのかよくわからない（まだ解決されていないと思って良いよね？）</li>\n</ul>\n<h1 id=\"1dd88a53-78b9-4136-9000-efb189010275\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#1dd88a53-78b9-4136-9000-efb189010275\" title=\"/pages?path=sano/M2日誌#1dd88a53-78b9-4136-9000-efb189010275\"></a>2022/04/19</h1>\n<p>差分リストの連結の証明を（例として）スライドにする．</p>\n<p>タイトルを決めて論文を書き始めた方が良い．</p>\n<ul>\n<li>書けるところを決めて書き始める</li>\n</ul>\n<p>POPL とか isopp とかを適当に眺めておく．</p>\n<hr />\n<p>rust に関するメモ：</p>\n<p>rust documentation</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/\">https://doc.rust-lang.org/book/</a></li>\n</ul>\n<p>writing an os in rust</p>\n<ul>\n<li><a href=\"https://os.phil-opp.com/\">https://os.phil-opp.com/</a></li>\n<li>x86 なので，研究室に転がってるクソ雑魚マシンを適当に使う予定．</li>\n</ul>\n<p>rust compiler documentation</p>\n<ul>\n<li><a href=\"https://rustc-dev-guide.rust-lang.org/\">https://rustc-dev-guide.rust-lang.org/</a></li>\n<li>コンパイラの構成などについてもかなり詳しくドキュメント化されている．</li>\n<li>この辺に課題とかが書いてあるので，解決できると．．．？？？\n– <a href=\"https://rustc-dev-guide.rust-lang.org/overview.html\">https://rustc-dev-guide.rust-lang.org/overview.html</a></li>\n</ul>\n<p>rust でバックエンド実装のサンプル</p>\n<ul>\n<li><a href=\"https://ozway.jp/2020/10/rust%E3%81%A7webapplication%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E3%80%80-%E3%81%9D%E3%81%AE1/\">RustでWebApplicationを実装する</a></li>\n<li>actix-web で api サーバを立てて，diesel でデータベースと接続（ORM）してる．</li>\n<li>バイト先ではこいつをベースを実装してる（ふりをしてる．あんまり進んでないが．．．）．</li>\n</ul>\n<p>front のためのフレームワークもある</p>\n<ul>\n<li><a href=\"https://github.com/yewstack/yew\">https://github.com/yewstack/yew</a></li>\n<li>view 以外は WASM にトランスパイルするっぽい．</li>\n</ul>\n<p>rust to WASM</p>\n<ul>\n<li><a href=\"https://rustwasm.github.io/book/\">https://rustwasm.github.io/book/</a></li>\n</ul>\n<hr />\n<p>jekyll の theme を適当にいじって自分のサイトのデザイン（色とフォントだけだが）を変えてみた．</p>\n<ul>\n<li><a href=\"https://www.ueda.info.waseda.ac.jp/%7Esano/\" title=\"https://www.ueda.info.waseda.ac.jp/~sano/\">https://www.ueda.info.waseda.ac.jp/~sano/</a></li>\n<li>[[gitlab repository&gt;https://gitlab.ueda.info.waseda.ac.jp/sano/mypage]]</li>\n<li>sass デビューです．</li>\n</ul>\n<h1 id=\"a02c50ab-0e26-480e-ab65-a0be626a7619\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#a02c50ab-0e26-480e-ab65-a0be626a7619\" title=\"/pages?path=sano/M2日誌#a02c50ab-0e26-480e-ab65-a0be626a7619\"></a>2022/04/17</h1>\n<p>&amp;ref(./invalid-pre-proof.png,20%);</p>\n<p><a href=\"http://www0.cs.ucl.ac.uk/staff/J.Brotherston/slides/imperial_04_08.pdf\">an introduction to cyclic proof</a></p>\n<h1 id=\"30deb842-d519-4c94-be79-dce4dd8e1d0c\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#30deb842-d519-4c94-be79-dce4dd8e1d0c\" title=\"/pages?path=sano/M2日誌#30deb842-d519-4c94-be79-dce4dd8e1d0c\"></a>2022/04/16</h1>\n<p>差分スキップリストと control flow graph の違いの話に関して追記（山本さんの日誌に対応して）：</p>\n<ul>\n<li>ただ切断するだけじゃなくて，切断したあとに根からのパスが正規言語になっている必要がある．ということ．</li>\n</ul>\n<hr />\n<p><a href=\"https://gitlab.haskell.org/ghc/ghc/-/wikis/index\">ghc (haskell) の wiki</a></p>\n<p>haskell の拡張まわりの面白い話が色々転がっていそう．</p>\n<hr />\n<p>[[egison documentation&gt;https://www.egison.org/tutorial.pdf]]</p>\n<p>egison は edge を整数の id で持たせる隣接リストを書いて，それに対してパターンマッチができる．</p>\n<ul>\n<li>つまり，グラフとそのパターンマッチが扱える．\n– 多重集合書き換え系としての lmntal の機能は大体再現できそう．</li>\n<li>ポインタを使ったデータ構造としての（lmntal の）グラフが直接扱えるわけではない．</li>\n</ul>\n<h1 id=\"cbb2e0b1-ad72-4b1d-98cb-30ee8b3ac503\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#cbb2e0b1-ad72-4b1d-98cb-30ee8b3ac503\" title=\"/pages?path=sano/M2日誌#cbb2e0b1-ad72-4b1d-98cb-30ee8b3ac503\"></a>2022/04/15</h1>\n<p>D ゼミ：</p>\n<p>今考えていることについて話した．</p>\n<p>グラフの合成，分解の定義は？</p>\n<ul>\n<li>用語があまりよろしくない．特に分解に関して．</li>\n<li>合成は終端記号や非終端記号を適当にくっつけたグラフの型検査</li>\n<li>分解はパターンマッチの際の話：\n– パターンマッチの網羅性，全てのパターンがマッチしうるものになっているかの検証，パターンマッチが決定的に行われるかの検証</li>\n<li>のつもり．</li>\n</ul>\n<p>差分スキップリストはなぜ Regular に入るのか？（control flow graph は入らないのに）</p>\n<ul>\n<li>うまいこと切断してやっている．</li>\n<li>control flow graph は差分スキップリストとは違い，（少なくとも，素朴には）「うまい切断」ができない．</li>\n</ul>\n<p>「◁」の定義は外延的だけど，もう少し扱いやすい形にできるのではないか？（完全性を捨てても良い？）</p>\n<ul>\n<li>いまいち意図が理解できていないかも知れない．定義だし，個人的には綺麗で自然な定義という感じがする．</li>\n<li>todo: 外延的な定義を加えたのは，「開始記号まで辿れる」というだけだと差分リストの末尾問題が解消できないから．という説明を加える．</li>\n</ul>\n<p>マーカの話（leaf linked tree で leaf だけを伝わるということ）は別に検証できなかったとしても，\nユーザに余計なパターンを書かせれば良いだけ（安全ではある）なので，\n重要度はそこまで高くないのでは？</p>\n<ul>\n<li>それはそう．</li>\n</ul>\n<p>マーカーとかいう新しい概念を入れるよりも，型定義を複雑にしてでもそれでやった方が綺麗になるのでは？</p>\n<ul>\n<li>わからない（そうではないと思ってはいる）．</li>\n<li>実際に型定義を書いて検証してみた方が良いだろう．とのこと．</li>\n</ul>\n<p>これは関数型のための手法なのか？というか関数はないのか？</p>\n<ul>\n<li>データ構造の検証で，将来的な落とし所は Rust の拡張である．</li>\n<li>関数型に限らず応用できる．</li>\n</ul>\n<p>プログラムを，グラフ部分を図として表すと見やすいことがわかった．</p>\n<hr />\n<p><a href=\"https://speakerdeck.com/kaityo256/how-to-survey?slide=15\">論文の読み方</a></p>\n<h1 id=\"ceea14d0-859b-4e61-bebd-ed2e2499ec9b\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#ceea14d0-859b-4e61-bebd-ed2e2499ec9b\" title=\"/pages?path=sano/M2日誌#ceea14d0-859b-4e61-bebd-ed2e2499ec9b\"></a>2022/04/14</h1>\n<p>班ゼミ：</p>\n<ul>\n<li>PPL2022 の報告</li>\n</ul>\n<p>cyclic proof を用いたメタ定理：</p>\n<h1 id=\"b547973a-3805-4bb4-b320-237bcfa7c18b\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#b547973a-3805-4bb4-b320-237bcfa7c18b\" title=\"/pages?path=sano/M2日誌#b547973a-3805-4bb4-b320-237bcfa7c18b\"></a>2022/04/12</h1>\n<p>git(hub) 紹介をしました．</p>\n<ul>\n<li>去年までは，なんかこういうのあれば良いな．と思っていて，やってみたけど，実際にやるとなんかどうなんだろう（果たして必要だったのか）という気分になった．</li>\n</ul>\n<p>todo:</p>\n<ul>\n<li>uzawa くん（または M0）に zoom 接続係をたのむ．</li>\n</ul>\n<h1 id=\"8ca7a119-ea3d-481d-b50b-756655a2c562\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#8ca7a119-ea3d-481d-b50b-756655a2c562\" title=\"/pages?path=sano/M2日誌#8ca7a119-ea3d-481d-b50b-756655a2c562\"></a>2022/04/08</h1>\n<p>メモ：</p>\n<p>高信頼化ソフトウェアのための開発手法ガイドブック</p>\n<ul>\n<li><a href=\"https://www.ipa.go.jp/files/000005144.pdf\" title=\"https://www.ipa.go.jp/files/000005144.pdf\">https://www.ipa.go.jp/files/000005144.pdf</a></li>\n<li>現場用のテストの話．モデル検査とかはない（たぶん）</li>\n</ul>\n<h1 id=\"321c74c7-33f9-4bdb-a05c-c47578ae9f1c\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#321c74c7-33f9-4bdb-a05c-c47578ae9f1c\" title=\"/pages?path=sano/M2日誌#321c74c7-33f9-4bdb-a05c-c47578ae9f1c\"></a>2022/04/07</h1>\n<p>そろそろ研究がしたい．</p>\n<p>今何ができているか：</p>\n<ul>\n<li>グラフの合成に関して型検査の手法を考えた．\n<ul>\n<li>手法に関してはそれなりに自信がある．と思っている．</li>\n<li>一応実装も進めていたけど，問題が発覚したので，ゼロから作り直した方が良いかも（が時間も労力もかかる）</li>\n<li>この正当性に関して（特に cyclic proof 周り）は，特にきちんと議論したい（ので明日の余った時間と日曜日に資料を作る予定）．</li>\n</ul>\n</li>\n<li>グラフの分解に関しては，実はまだ手法は確立していない．\n<ul>\n<li>頭の中に何となくはある．</li>\n</ul>\n</li>\n<li>マーカーの導入．その型検査．\n<ul>\n<li>これも手法が確立していない．頭の中に何となくといった感じ．</li>\n</ul>\n</li>\n</ul>\n<p>何をすべきか？</p>\n<ul>\n<li>実装は一旦放置して分解やマーカーの検査の手法をきちんと確立する？</li>\n</ul>\n<p>相談すべきこと：</p>\n<ul>\n<li>論文にするとしたらどういう形になるのか．正直よくわかっていないので，そこから要相談．というか先に自分で調べないといけない．</li>\n<li>グラフの合成の正当性の議論</li>\n<li>グラフの分解やマーカの検査（これはまだ持ち出さない方が良いかも？）</li>\n</ul>\n<p>その他論文にできるかも知れないと考えている話：\nflat hyperlmntal の semantics</p>\n<ul>\n<li>正直これ以上意味論を発展させるほぼ気はない（プロセスの等価性とか）\n<ul>\n<li>土台がふわふわしていて私にはよくわからなかった（現時点での私には理解できていないというだけで，価値がないだとか主張しているわけではない）．</li>\n</ul>\n</li>\n<li>「自由リンクの集合が構造合同なプロセス間で変わらない」というのは，\n要するに，「全てのリンクがつながっている」ことを証明できてしまった素朴な flat lmntal の拡張とは違うということにつながっているはずなので，\nこのあたりの証明をもうちょっとだけちゃんとやれば，それっぽく見えるようになるのではないかと思っている（つまり，「全てのリンクがつながっている」わけではないということをきちんと証明してやる）．</li>\n</ul>\n<p>やらなきゃいけないこと：</p>\n<ul>\n<li>資料作成．現状の整理．</li>\n<li>投稿先を調べる？</li>\n</ul>\n<h1 id=\"5effe415-70a5-4021-8cd8-7dfa313432c5\"><a href=\"/pages?path=sano/M2%E6%97%A5%E8%AA%8C#5effe415-70a5-4021-8cd8-7dfa313432c5\" title=\"/pages?path=sano/M2日誌#5effe415-70a5-4021-8cd8-7dfa313432c5\"></a>2022/04/04</h1>\n<p>this is a test</p>\n</div>\n      </div>\n    </div>\n  </body>\n\n  <script>\n    function copyToClipboard(text) {\n      const textArea = document.createElement(\"textarea\");\n      textArea.value = text;\n\n      // Avoid scrolling to bottom\n      textArea.style.top = \"0\";\n      textArea.style.left = \"0\";\n      textArea.style.position = \"fixed\";\n\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n\n      document.execCommand(\"copy\");\n\n      textArea.parentNode.removeChild(textArea);\n    }\n\n    window.addEventListener(\"DOMContentLoaded\", () => {\n      // ページの削除\n      const btn_submit = document.getElementById(\"btn-submit-delete\");\n      btn_submit.addEventListener(\"click\", async (e) => {\n        e.preventDefault();\n\n        // フォームの入力値を送信\n        const response = await fetch(\n          \"/edit?\" + new URLSearchParams({ path: \"sano/M2日誌\" }),\n          { method: \"DELETE\" }\n        );\n\n        // redirect to the home page\n        window.location = \"/\";\n      });\n\n      // ファイルの添付\n      const btn_select_attach = document.getElementById(\"btn-select-attach\");\n      // const btn_post_attach = document.getElementById(\"btn-post-attach\");\n      // Select your input type file and store it in a variable\n\n      // This will upload the file after having read it\n      const upload = (file) => {\n        const formData = new FormData();\n        formData.append(\"filename\", file);\n\n        fetch(\"/attach?\" + new URLSearchParams({ path: \"sano/M2日誌\" }), {\n          // Your POST endpoint\n          method: \"POST\",\n          body: formData, // This is your file object\n        });\n      };\n\n      // Event handler executed when a file is selected\n      const onSelectFile = () => upload(btn_select_attach.files[0]);\n\n      // Add a listener on your input\n      // It will be triggered when a file will be selected\n      btn_select_attach.addEventListener(\"change\", onSelectFile, false);\n\n      // ソースコードをコピーできるボタンの追加\n      // const btn_submit = document.getElementById(\"btn-submit-delete\");\n      const collection = document.getElementsByTagName(\"pre\");\n      for (let cell of collection) {\n        // create a new div element\n        const newDiv = document.createElement(\"div\");\n        newDiv.classList.add(\"code-copy-button\");\n\n        const newI = document.createElement(\"i\");\n        newI.classList.add(\"fa-solid\");\n        newI.classList.add(\"fa-copy\");\n\n        newDiv.appendChild(newI);\n\n        newDiv.addEventListener(\"click\", async (e) => {\n          e.target.classList.add(\"copied\");\n          e.preventDefault();\n\n          const code = cell.innerText;\n          console.log(code);\n          copyToClipboard(code);\n          setTimeout(() => {\n            console.log(\"Delayed for 5 second.\");\n            e.target.classList.remove(\"copied\");\n          }, 3000);\n        });\n\n        cell.appendChild(newDiv);\n      }\n    });\n  </script>\n</html>\n","modified_rfc3339":"2022-05-09T02:08:04.538433+00:00"}