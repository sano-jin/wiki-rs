# 2022/05/05

When \(a \ne 0 \), there are two solutions to 
\(ax^2 + bx + c = 0\) and they are
$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$




# 2022/04/26

hogehoge

# 2022/04/23


メモ：
rust で何作ろうか考えていた．wiki を作ってみるのは良いかもしれない．

----

今日のクソコード

python/selenium で，

```python
 elem.implicityly_wait = 5
```

とか言う意味不明なことをやっていた．
- そもそも，`elem.implicitly_wait(5)` のように関数適用するはずで，なぜ代入しだすのか意味不明．
- しかもスペルミスしてる implicitYly_wait となっていた．代入を関数適用に直しただけだと実行時エラーになってクソ．

誰だこれ書いたの（憤怒．とか言って，もしかしてぼくか？？？）



----

[Is Parallel Programming Hard, And, If So, What Can You Do About It?](https://arxiv.org/pdf/1701.00854.pdf) を冒頭 110 ページくらいをザーッと流し読みした．
- （かなり初歩的な部分から）相当わかりやすく書かれている印象を受けた．確かに並列をやるなら眺めておくべきと言う感じではある．
- appendix を除くと，全部で 400 ページ（そんなに多くない）．ミニクイズの答えもちゃんとついてきているし，暇つぶし感覚でもう少し読んでみようかなと思っております．
- http://liburcu.org/



# 2022/04/22

to yamamoto:
[Dactl](https://www.researchgate.net/publication/220398770_Dactl_an_experimental_graph_rewriting_language) には，モジュールやアクセス修飾子もある．
- 「単なるモジュール化（？）」にあまり興味は持てない．
- けど，データフロー言語が現状どうなっているかとか，外界は常に気になる．
- session types とか．GraphQL とか．



# 2022/04/20

[graph grammar inclusion problem で検索して出てきた謎の pdf](https://moves.rwth-aachen.de/wp-content/uploads/proposal-inclusion-problem.pdf)
- 一体どういうものなのかよくわからない（まだ解決されていないと思って良いよね？）

# 2022/04/19

差分リストの連結の証明を（例として）スライドにする．


タイトルを決めて論文を書き始めた方が良い．
- 書けるところを決めて書き始める


POPL とか isopp とかを適当に眺めておく．


----

rust に関するメモ：

rust documentation
- https://doc.rust-lang.org/book/


writing an os in rust
- https://os.phil-opp.com/
- x86 なので，研究室に転がってるクソ雑魚マシンを適当に使う予定．


rust compiler documentation
- https://rustc-dev-guide.rust-lang.org/
- コンパイラの構成などについてもかなり詳しくドキュメント化されている．
- この辺に課題とかが書いてあるので，解決できると．．．？？？
-- https://rustc-dev-guide.rust-lang.org/overview.html


rust でバックエンド実装のサンプル
- [RustでWebApplicationを実装する](https://ozway.jp/2020/10/rust%E3%81%A7webapplication%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E3%80%80-%E3%81%9D%E3%81%AE1/)
- actix-web で api サーバを立てて，diesel でデータベースと接続（ORM）してる．
- バイト先ではこいつをベースを実装してる（ふりをしてる．あんまり進んでないが．．．）．


front のためのフレームワークもある
- <https://github.com/yewstack/yew>
- view 以外は WASM にトランスパイルするっぽい．


rust to WASM
- <https://rustwasm.github.io/book/>


----

jekyll の theme を適当にいじって自分のサイトのデザイン（色とフォントだけだが）を変えてみた．
- https://www.ueda.info.waseda.ac.jp/~sano/
- [[gitlab repository>https://gitlab.ueda.info.waseda.ac.jp/sano/mypage]]
- sass デビューです．





# 2022/04/17



&ref(./invalid-pre-proof.png,20%);

[an introduction to cyclic proof](http://www0.cs.ucl.ac.uk/staff/J.Brotherston/slides/imperial_04_08.pdf)


# 2022/04/16


差分スキップリストと control flow graph の違いの話に関して追記（山本さんの日誌に対応して）：
- ただ切断するだけじゃなくて，切断したあとに根からのパスが正規言語になっている必要がある．ということ．

// 「◁」に関しては，普通に「：」を使えば良い気がしてきた．


----

[ghc (haskell) の wiki](https://gitlab.haskell.org/ghc/ghc/-/wikis/index)

haskell の拡張まわりの面白い話が色々転がっていそう．

----

[[egison documentation>https://www.egison.org/tutorial.pdf]]

egison は edge を整数の id で持たせる隣接リストを書いて，それに対してパターンマッチができる．
- つまり，グラフとそのパターンマッチが扱える．
-- 多重集合書き換え系としての lmntal の機能は大体再現できそう．
- ポインタを使ったデータ構造としての（lmntal の）グラフが直接扱えるわけではない．




# 2022/04/15 [#h4c45aae]



D ゼミ：

今考えていることについて話した．

グラフの合成，分解の定義は？
- 用語があまりよろしくない．特に分解に関して．
- 合成は終端記号や非終端記号を適当にくっつけたグラフの型検査
- 分解はパターンマッチの際の話：
-- パターンマッチの網羅性，全てのパターンがマッチしうるものになっているかの検証，パターンマッチが決定的に行われるかの検証
- のつもり．

差分スキップリストはなぜ Regular に入るのか？（control flow graph は入らないのに）
- うまいこと切断してやっている．
- control flow graph は差分スキップリストとは違い，（少なくとも，素朴には）「うまい切断」ができない．

「◁」の定義は外延的だけど，もう少し扱いやすい形にできるのではないか？（完全性を捨てても良い？）
- いまいち意図が理解できていないかも知れない．定義だし，個人的には綺麗で自然な定義という感じがする．
- todo: 外延的な定義を加えたのは，「開始記号まで辿れる」というだけだと差分リストの末尾問題が解消できないから．という説明を加える．

マーカの話（leaf linked tree で leaf だけを伝わるということ）は別に検証できなかったとしても，
ユーザに余計なパターンを書かせれば良いだけ（安全ではある）なので，
重要度はそこまで高くないのでは？
- それはそう．

マーカーとかいう新しい概念を入れるよりも，型定義を複雑にしてでもそれでやった方が綺麗になるのでは？
- わからない（そうではないと思ってはいる）．
- 実際に型定義を書いて検証してみた方が良いだろう．とのこと．

これは関数型のための手法なのか？というか関数はないのか？
- データ構造の検証で，将来的な落とし所は Rust の拡張である．
- 関数型に限らず応用できる．


プログラムを，グラフ部分を図として表すと見やすいことがわかった．





----


[論文の読み方](https://speakerdeck.com/kaityo256/how-to-survey?slide=15)


# 2022/04/14 [#qb80840f]

班ゼミ：
- PPL2022 の報告



cyclic proof を用いたメタ定理：


# 2022/04/12 [#t6c773c5]

git(hub) 紹介をしました．
- 去年までは，なんかこういうのあれば良いな．と思っていて，やってみたけど，実際にやるとなんかどうなんだろう（果たして必要だったのか）という気分になった．


todo:
- uzawa くん（または M0）に zoom 接続係をたのむ．






# 2022/04/08 [#o48ce779]

メモ：

高信頼化ソフトウェアのための開発手法ガイドブック
- https://www.ipa.go.jp/files/000005144.pdf
- 現場用のテストの話．モデル検査とかはない（たぶん）


# 2022/04/07 [#cbab4dd4]

そろそろ研究がしたい．


今何ができているか：
- グラフの合成に関して型検査の手法を考えた．
  - 手法に関してはそれなりに自信がある．と思っている．
  - 一応実装も進めていたけど，問題が発覚したので，ゼロから作り直した方が良いかも（が時間も労力もかかる）
  - この正当性に関して（特に cyclic proof 周り）は，特にきちんと議論したい（ので明日の余った時間と日曜日に資料を作る予定）．
- グラフの分解に関しては，実はまだ手法は確立していない．
  - 頭の中に何となくはある．
- マーカーの導入．その型検査．
  - これも手法が確立していない．頭の中に何となくといった感じ．


何をすべきか？
- 実装は一旦放置して分解やマーカーの検査の手法をきちんと確立する？


相談すべきこと：
+ 論文にするとしたらどういう形になるのか．正直よくわかっていないので，そこから要相談．というか先に自分で調べないといけない．
+ グラフの合成の正当性の議論
+ グラフの分解やマーカの検査（これはまだ持ち出さない方が良いかも？）


その他論文にできるかも知れないと考えている話：
flat hyperlmntal の semantics
- 正直これ以上意味論を発展させるほぼ気はない（プロセスの等価性とか）
  - 土台がふわふわしていて私にはよくわからなかった（現時点での私には理解できていないというだけで，価値がないだとか主張しているわけではない）．
- 「自由リンクの集合が構造合同なプロセス間で変わらない」というのは，
要するに，「全てのリンクがつながっている」ことを証明できてしまった素朴な flat lmntal の拡張とは違うということにつながっているはずなので，
このあたりの証明をもうちょっとだけちゃんとやれば，それっぽく見えるようになるのではないかと思っている（つまり，「全てのリンクがつながっている」わけではないということをきちんと証明してやる）．


やらなきゃいけないこと：
- 資料作成．現状の整理．
- 投稿先を調べる？





# 2022/04/04 [#wf82023f]

this is a test
