{"path":"clean architecture に関してのメモ","name":"clean architecture に関してのメモ","markdown":"# DDD: Domain Driven Development { #8e64b90a-1b45-4e60-bad1-2c5476f65807 }\n\n顧客の実現したいことをモデル化して，それを中心に実装する．\n- DDD でない開発だと，「顧客の実現したいことを抽出して，それをもとに仕様を決めて，それを実装する」\n  という感じになるけど，\n- それだと「顧客の実現したいこと」と「仕様」が乖離する可能性がある\n- なので，まず「顧客の実現したいこと（非常に抽象が高い）」をモデルにしてそれ（の interface）を実装して，\n- それから具体的な操作を追加実装していく\n\n結論：よくわからない\n\n# MVC { #0a9b6476-dfbf-4786-aed5-92e324374bae }\nModel（データ？），View（ユーザへの出力処理），Controller（ユーザからの入力処理）に分割する\n- システムの実装における依存関係に関しては言及していない（？）\n\n結論：よくわからない\n\n# Layered architecture { #1380aa28-ce1d-4ef0-95d6-9cb4a96a617e }\n\nシステムの実装を４つのレイヤにわけて，\n下のレイヤから上のレイヤへの依存を許さないことで，\n依存関係をきれいに保ってコードを保守しやすくする\n- 良くない所：一番下のレイヤが DB となっていて，DB に依存してしまっている\n\n# Clean architecture { #76f2a5b6-2aee-404a-846c-f0307346d21d }\n\nシステムの実装を４つのレイヤに分ける．\n- ただし，layered architecture とは違い，\n  - 一番下はモデルっぽいやつ（entity）で，\n  - DB 関連の実装（gateway）や外部デバイス／Web access 関連の実装（controller）は\n    DI（依存性の注入）によって，\n    一番外側（一番上）のレイヤに来るようになっている\n- DB や web access の handling をする実装は一番上のレイヤでそれに依存する部分がないので，\n  自由に差し替えられる（移植性が高い）\n\n![clean-architecture.png](clean-architecture.png)\n![clean-architecture.jpeg](CleanArchitecture.jpeg)","html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n    <!-- google font -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Fira+Sans:wght@300;700&family=JetBrains+Mono:wght@300;700&family=Noto+Sans+JP:wght@300;700&display=swap\"\n      rel=\"stylesheet\"\n    />\n\n    <!-- highlight.js -->\n    <link rel=\"stylesheet\" href=\"/files/assets/dracula.css\" />\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js\"></script>\n    <script>\n      hljs.highlightAll();\n    </script>\n\n    <!-- mathjax -->\n    <script src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>\n    <script\n      type=\"text/javascript\"\n      id=\"MathJax-script\"\n      async\n      src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\"\n    ></script>\n\n    <!-- custom css -->\n    <link rel=\"stylesheet\" href=\"/files/assets/main.css\" />\n\n    <title>clean architecture に関してのメモ</title>\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div class=\"wrapper\">\n        <div class=\"site-header\">\n          <div class=\"site-title\">clean architecture に関してのメモ</div>\n        </div>\n      </div>\n\n      <!-- header menu bar -->\n      <div class=\"wrapper header-menu\">\n        <a href=\"/\" class=\"button\">HOME</a>\n        <a href=\"/edit?path=clean architecture に関してのメモ\" class=\"button\">Update</a>\n        <form\n          action=\"/attach?path=clean architecture に関してのメモ\"\n          method=\"post\"\n          enctype=\"multipart/form-data\"\n          class=\"form-hided\"\n        >\n          <label class=\"button\">\n            Attach\n            <input\n              id=\"btn-select-attach\"\n              type=\"file\"\n              multiple\n              name=\"file\"\n              class=\"input-hided\"\n            />\n          </label>\n          <!--\n          <button type=\"submit\" class=\"button\">Submit</button>\n          -->\n        </form>\n        <form action=\"/edit\" method=\"DELETE\">\n          <input\n            type=\"submit\"\n            id=\"btn-submit-delete\"\n            name=\"btn-submit-delete\"\n            value=\"Delete\"\n            class=\"button\"\n          />\n        </form>\n      </div>\n\n      <div class=\"main-body\">\n        <!-- side menu bar -->\n        <div class=\"sidebar\">{{ SIDE_MENU }}</div>\n\n        <!-- body contents -->\n        <div class=\"body-contents\">\n          <div class=\"updated-date\">Last modified: 2022-05-14 22:35:48</div>\n          <div class=\"body\"><div class=\"menu collapse\"><ul>\n<li><a href=\"#8e64b90a-1b45-4e60-bad1-2c5476f65807\">DDD: Domain Driven Development</a></li>\n<li><a href=\"#0a9b6476-dfbf-4786-aed5-92e324374bae\">MVC</a></li>\n<li><a href=\"#1380aa28-ce1d-4ef0-95d6-9cb4a96a617e\">Layered architecture</a></li>\n<li><a href=\"#76f2a5b6-2aee-404a-846c-f0307346d21d\">Clean architecture</a></li>\n</ul>\n</div>\n<h1 id=\"8e64b90a-1b45-4e60-bad1-2c5476f65807\"><a href=\"/pages?path=clean%20architecture%20%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6%E3%81%AE%E3%83%A1%E3%83%A2#8e64b90a-1b45-4e60-bad1-2c5476f65807\" title=\"/pages?path=clean architecture に関してのメモ#8e64b90a-1b45-4e60-bad1-2c5476f65807\"></a>DDD: Domain Driven Development</h1>\n<p>顧客の実現したいことをモデル化して，それを中心に実装する．</p>\n<ul>\n<li>DDD でない開発だと，「顧客の実現したいことを抽出して，それをもとに仕様を決めて，それを実装する」\nという感じになるけど，</li>\n<li>それだと「顧客の実現したいこと」と「仕様」が乖離する可能性がある</li>\n<li>なので，まず「顧客の実現したいこと（非常に抽象が高い）」をモデルにしてそれ（の interface）を実装して，</li>\n<li>それから具体的な操作を追加実装していく</li>\n</ul>\n<p>結論：よくわからない</p>\n<h1 id=\"0a9b6476-dfbf-4786-aed5-92e324374bae\"><a href=\"/pages?path=clean%20architecture%20%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6%E3%81%AE%E3%83%A1%E3%83%A2#0a9b6476-dfbf-4786-aed5-92e324374bae\" title=\"/pages?path=clean architecture に関してのメモ#0a9b6476-dfbf-4786-aed5-92e324374bae\"></a>MVC</h1>\n<p>Model（データ？），View（ユーザへの出力処理），Controller（ユーザからの入力処理）に分割する</p>\n<ul>\n<li>システムの実装における依存関係に関しては言及していない（？）</li>\n</ul>\n<p>結論：よくわからない</p>\n<h1 id=\"1380aa28-ce1d-4ef0-95d6-9cb4a96a617e\"><a href=\"/pages?path=clean%20architecture%20%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6%E3%81%AE%E3%83%A1%E3%83%A2#1380aa28-ce1d-4ef0-95d6-9cb4a96a617e\" title=\"/pages?path=clean architecture に関してのメモ#1380aa28-ce1d-4ef0-95d6-9cb4a96a617e\"></a>Layered architecture</h1>\n<p>システムの実装を４つのレイヤにわけて，\n下のレイヤから上のレイヤへの依存を許さないことで，\n依存関係をきれいに保ってコードを保守しやすくする</p>\n<ul>\n<li>良くない所：一番下のレイヤが DB となっていて，DB に依存してしまっている</li>\n</ul>\n<h1 id=\"76f2a5b6-2aee-404a-846c-f0307346d21d\"><a href=\"/pages?path=clean%20architecture%20%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6%E3%81%AE%E3%83%A1%E3%83%A2#76f2a5b6-2aee-404a-846c-f0307346d21d\" title=\"/pages?path=clean architecture に関してのメモ#76f2a5b6-2aee-404a-846c-f0307346d21d\"></a>Clean architecture</h1>\n<p>システムの実装を４つのレイヤに分ける．</p>\n<ul>\n<li>ただし，layered architecture とは違い，\n<ul>\n<li>一番下はモデルっぽいやつ（entity）で，</li>\n<li>DB 関連の実装（gateway）や外部デバイス／Web access 関連の実装（controller）は\nDI（依存性の注入）によって，\n一番外側（一番上）のレイヤに来るようになっている</li>\n</ul>\n</li>\n<li>DB や web access の handling をする実装は一番上のレイヤでそれに依存する部分がないので，\n自由に差し替えられる（移植性が高い）</li>\n</ul>\n<p><img src=\"/attach?path=clean%20architecture%20%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6%E3%81%AE%E3%83%A1%E3%83%A2&amp;file=clean-architecture.png\" alt=\"clean-architecture.png\" />\n<img src=\"/attach?path=clean%20architecture%20%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6%E3%81%AE%E3%83%A1%E3%83%A2&amp;file=CleanArchitecture.jpeg\" alt=\"clean-architecture.jpeg\" /></p>\n</div>\n        </div>\n      </div>\n\n      <!-- footer -->\n      <div class=\"site-footer\">\n        <div class=\"attach-names\">{{ ATTACH_NAMES }}</div>\n      </div>\n\n      <!-- button to go top -->\n      <button id=\"go-up-button\" onclick=\"gotop()\">▲</button>\n    </div>\n  </body>\n\n  <script src=\"/files/js/page.js\"></script>\n</html>\n","modified_rfc3339":"2022-05-14T13:35:48.838437+00:00"}